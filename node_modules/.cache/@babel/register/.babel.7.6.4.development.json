{
  "{\"sourceRoot\":\"/var/www/node/recharge/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/var/www/node/recharge\",\"filename\":\"/var/www/node/recharge/src/server.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/var/www/node/recharge\",\"plugins\":[{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.6.4": {
    "metadata": {},
    "options": {
      "sourceRoot": "/var/www/node/recharge/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/var/www/node/recharge",
      "filename": "/var/www/node/recharge/src/server.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/var/www/node/recharge",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/var/www/node/recharge/src/server.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/var/www/node/recharge/src/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/var/www/node/recharge/src",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _mongodb = require(\"mongodb\");\n\nvar _bodyParser = _interopRequireDefault(require(\"body-parser\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Ajv = require('ajv');\n\nvar app = (0, _express[\"default\"])();\nvar url = 'mongodb://localhost:27017';\nvar dbName = 'recharge';\nvar client = new _mongodb.MongoClient(url);\napp.use(_bodyParser[\"default\"].json()); // app.get(\"/\", async (req, res) => {\n//     try {\n//         const client = await MongoClient.connect(url);\n//         const db = client.db(dbName);\n//         let insert = await db.collection(\"users\").insertOne({\n//             \"name\": \"Zohurul Islam\",\n//             username: \"mail@zohurul.com\",\n//             \"password\": \"123456\"\n//         })\n//         let hash = bcrypt.hashSync('myPassword', 10);\n//         client.close();\n//     } catch (error) {\n//         res.status(500).json({ message: 'Error connecting to db', error });\n//     }\n// });\n\napp.get(\"/\", function (req, res) {\n  var userJsonSchema = require('../schema/user-insert.json');\n\n  var ajv = new Ajv();\n  var validate = ajv.compile(userJsonSchema);\n\n  if (!validate(req.body)) {\n    return throwError(validate, res);\n  }\n});\n\nvar throwError = function throwError(validate, res) {\n  var JSONAPIError = require('jsonapi-serializer').Error;\n\n  errors = [];\n\n  for (var i in validate.errors) {\n    console.log(validate.errors[i].params.missingProperty);\n    var pointer = validate.errors[i].params.missingProperty ? validate.errors[i].params.missingProperty : validate.errors[i].dataPath;\n    errors.push({\n      code: 400,\n      source: {\n        pointer: pointer\n      },\n      title: validate.errors[i].message\n    });\n  }\n\n  var errors = new JSONAPIError(errors);\n  return res.status(400).json(errors);\n};\n\napp.listen(8000, function () {\n  return console.log('Listening on port 8000');\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJBanYiLCJyZXF1aXJlIiwiYXBwIiwidXJsIiwiZGJOYW1lIiwiY2xpZW50IiwiTW9uZ29DbGllbnQiLCJ1c2UiLCJib2R5UGFyc2VyIiwianNvbiIsImdldCIsInJlcSIsInJlcyIsInVzZXJKc29uU2NoZW1hIiwiYWp2IiwidmFsaWRhdGUiLCJjb21waWxlIiwiYm9keSIsInRocm93RXJyb3IiLCJKU09OQVBJRXJyb3IiLCJFcnJvciIsImVycm9ycyIsImkiLCJjb25zb2xlIiwibG9nIiwicGFyYW1zIiwibWlzc2luZ1Byb3BlcnR5IiwicG9pbnRlciIsImRhdGFQYXRoIiwicHVzaCIsImNvZGUiLCJzb3VyY2UiLCJ0aXRsZSIsIm1lc3NhZ2UiLCJzdGF0dXMiLCJsaXN0ZW4iXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7QUFDQSxJQUFNQSxHQUFHLEdBQUdDLE9BQU8sQ0FBQyxLQUFELENBQW5COztBQUdBLElBQU1DLEdBQUcsR0FBRywwQkFBWjtBQUVBLElBQU1DLEdBQUcsR0FBRywyQkFBWjtBQUNBLElBQU1DLE1BQU0sR0FBRyxVQUFmO0FBQ0EsSUFBTUMsTUFBTSxHQUFHLElBQUlDLG9CQUFKLENBQWdCSCxHQUFoQixDQUFmO0FBRUFELEdBQUcsQ0FBQ0ssR0FBSixDQUFRQyx1QkFBV0MsSUFBWCxFQUFSLEUsQ0FFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0FQLEdBQUcsQ0FBQ1EsR0FBSixDQUFRLEdBQVIsRUFBYSxVQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBYztBQUN2QixNQUFJQyxjQUFjLEdBQUdaLE9BQU8sQ0FBQyw0QkFBRCxDQUE1Qjs7QUFDQSxNQUFJYSxHQUFHLEdBQUcsSUFBSWQsR0FBSixFQUFWO0FBQ0EsTUFBSWUsUUFBUSxHQUFHRCxHQUFHLENBQUNFLE9BQUosQ0FBWUgsY0FBWixDQUFmOztBQUNBLE1BQUksQ0FBQ0UsUUFBUSxDQUFDSixHQUFHLENBQUNNLElBQUwsQ0FBYixFQUF5QjtBQUNyQixXQUFPQyxVQUFVLENBQUNILFFBQUQsRUFBV0gsR0FBWCxDQUFqQjtBQUNIO0FBRUosQ0FSRDs7QUFVQSxJQUFJTSxVQUFVLEdBQUcsU0FBYkEsVUFBYSxDQUFDSCxRQUFELEVBQVdILEdBQVgsRUFBbUI7QUFDaEMsTUFBSU8sWUFBWSxHQUFHbEIsT0FBTyxDQUFDLG9CQUFELENBQVAsQ0FBOEJtQixLQUFqRDs7QUFFQUMsRUFBQUEsTUFBTSxHQUFHLEVBQVQ7O0FBQ0EsT0FBSyxJQUFJQyxDQUFULElBQWNQLFFBQVEsQ0FBQ00sTUFBdkIsRUFBK0I7QUFDM0JFLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZVCxRQUFRLENBQUNNLE1BQVQsQ0FBZ0JDLENBQWhCLEVBQW1CRyxNQUFuQixDQUEwQkMsZUFBdEM7QUFDQSxRQUFJQyxPQUFPLEdBQUdaLFFBQVEsQ0FBQ00sTUFBVCxDQUFnQkMsQ0FBaEIsRUFBbUJHLE1BQW5CLENBQTBCQyxlQUExQixHQUE0Q1gsUUFBUSxDQUFDTSxNQUFULENBQWdCQyxDQUFoQixFQUFtQkcsTUFBbkIsQ0FBMEJDLGVBQXRFLEdBQXdGWCxRQUFRLENBQUNNLE1BQVQsQ0FBZ0JDLENBQWhCLEVBQW1CTSxRQUF6SDtBQUNBUCxJQUFBQSxNQUFNLENBQUNRLElBQVAsQ0FBWTtBQUNSQyxNQUFBQSxJQUFJLEVBQUUsR0FERTtBQUVSQyxNQUFBQSxNQUFNLEVBQUU7QUFBRUosUUFBQUEsT0FBTyxFQUFQQTtBQUFGLE9BRkE7QUFHUkssTUFBQUEsS0FBSyxFQUFFakIsUUFBUSxDQUFDTSxNQUFULENBQWdCQyxDQUFoQixFQUFtQlc7QUFIbEIsS0FBWjtBQUtIOztBQUVELE1BQUlaLE1BQU0sR0FBRyxJQUFJRixZQUFKLENBQWlCRSxNQUFqQixDQUFiO0FBQ0EsU0FBT1QsR0FBRyxDQUFDc0IsTUFBSixDQUFXLEdBQVgsRUFBZ0J6QixJQUFoQixDQUFxQlksTUFBckIsQ0FBUDtBQUNILENBaEJEOztBQWtCQW5CLEdBQUcsQ0FBQ2lDLE1BQUosQ0FBVyxJQUFYLEVBQWlCO0FBQUEsU0FBTVosT0FBTyxDQUFDQyxHQUFSLENBQVksd0JBQVosQ0FBTjtBQUFBLENBQWpCIiwic291cmNlUm9vdCI6Ii92YXIvd3d3L25vZGUvcmVjaGFyZ2Uvc3JjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCB7IE1vbmdvQ2xpZW50IH0gZnJvbSBcIm1vbmdvZGJcIjtcbmltcG9ydCBib2R5UGFyc2VyIGZyb20gJ2JvZHktcGFyc2VyJztcbmNvbnN0IEFqdiA9IHJlcXVpcmUoJ2FqdicpO1xuXG5cbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcblxuY29uc3QgdXJsID0gJ21vbmdvZGI6Ly9sb2NhbGhvc3Q6MjcwMTcnO1xuY29uc3QgZGJOYW1lID0gJ3JlY2hhcmdlJztcbmNvbnN0IGNsaWVudCA9IG5ldyBNb25nb0NsaWVudCh1cmwpO1xuXG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcblxuLy8gYXBwLmdldChcIi9cIiwgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4vLyAgICAgdHJ5IHtcbi8vICAgICAgICAgY29uc3QgY2xpZW50ID0gYXdhaXQgTW9uZ29DbGllbnQuY29ubmVjdCh1cmwpO1xuLy8gICAgICAgICBjb25zdCBkYiA9IGNsaWVudC5kYihkYk5hbWUpO1xuLy8gICAgICAgICBsZXQgaW5zZXJ0ID0gYXdhaXQgZGIuY29sbGVjdGlvbihcInVzZXJzXCIpLmluc2VydE9uZSh7XG4vLyAgICAgICAgICAgICBcIm5hbWVcIjogXCJab2h1cnVsIElzbGFtXCIsXG4vLyAgICAgICAgICAgICB1c2VybmFtZTogXCJtYWlsQHpvaHVydWwuY29tXCIsXG4vLyAgICAgICAgICAgICBcInBhc3N3b3JkXCI6IFwiMTIzNDU2XCJcbi8vICAgICAgICAgfSlcbi8vICAgICAgICAgbGV0IGhhc2ggPSBiY3J5cHQuaGFzaFN5bmMoJ215UGFzc3dvcmQnLCAxMCk7XG4vLyAgICAgICAgIGNsaWVudC5jbG9zZSgpO1xuLy8gICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4vLyAgICAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogJ0Vycm9yIGNvbm5lY3RpbmcgdG8gZGInLCBlcnJvciB9KTtcbi8vICAgICB9XG4vLyB9KTtcbmFwcC5nZXQoXCIvXCIsIChyZXEsIHJlcykgPT4ge1xuICAgIGxldCB1c2VySnNvblNjaGVtYSA9IHJlcXVpcmUoJy4uL3NjaGVtYS91c2VyLWluc2VydC5qc29uJyk7XG4gICAgbGV0IGFqdiA9IG5ldyBBanYoKTtcbiAgICBsZXQgdmFsaWRhdGUgPSBhanYuY29tcGlsZSh1c2VySnNvblNjaGVtYSk7XG4gICAgaWYgKCF2YWxpZGF0ZShyZXEuYm9keSkpIHtcbiAgICAgICAgcmV0dXJuIHRocm93RXJyb3IodmFsaWRhdGUsIHJlcyk7XG4gICAgfVxuICAgIFxufSk7XG5cbmxldCB0aHJvd0Vycm9yID0gKHZhbGlkYXRlLCByZXMpID0+IHtcbiAgICBsZXQgSlNPTkFQSUVycm9yID0gcmVxdWlyZSgnanNvbmFwaS1zZXJpYWxpemVyJykuRXJyb3I7XG5cbiAgICBlcnJvcnMgPSBbXTtcbiAgICBmb3IgKGxldCBpIGluIHZhbGlkYXRlLmVycm9ycykge1xuICAgICAgICBjb25zb2xlLmxvZyh2YWxpZGF0ZS5lcnJvcnNbaV0ucGFyYW1zLm1pc3NpbmdQcm9wZXJ0eSk7XG4gICAgICAgIGxldCBwb2ludGVyID0gdmFsaWRhdGUuZXJyb3JzW2ldLnBhcmFtcy5taXNzaW5nUHJvcGVydHkgPyB2YWxpZGF0ZS5lcnJvcnNbaV0ucGFyYW1zLm1pc3NpbmdQcm9wZXJ0eSA6IHZhbGlkYXRlLmVycm9yc1tpXS5kYXRhUGF0aDtcbiAgICAgICAgZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgY29kZTogNDAwLFxuICAgICAgICAgICAgc291cmNlOiB7IHBvaW50ZXIgfSxcbiAgICAgICAgICAgIHRpdGxlOiB2YWxpZGF0ZS5lcnJvcnNbaV0ubWVzc2FnZSxcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBsZXQgZXJyb3JzID0gbmV3IEpTT05BUElFcnJvcihlcnJvcnMpO1xuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbihlcnJvcnMpO1xufVxuXG5hcHAubGlzdGVuKDgwMDAsICgpID0+IGNvbnNvbGUubG9nKCdMaXN0ZW5pbmcgb24gcG9ydCA4MDAwJykpOyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "Ajv",
        "require",
        "app",
        "url",
        "dbName",
        "client",
        "MongoClient",
        "use",
        "bodyParser",
        "json",
        "get",
        "req",
        "res",
        "userJsonSchema",
        "ajv",
        "validate",
        "compile",
        "body",
        "throwError",
        "JSONAPIError",
        "Error",
        "errors",
        "i",
        "console",
        "log",
        "params",
        "missingProperty",
        "pointer",
        "dataPath",
        "push",
        "code",
        "source",
        "title",
        "message",
        "status",
        "listen"
      ],
      "mappings": ";;AAAA;;AACA;;AACA;;;;AACA,IAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AAGA,IAAMC,GAAG,GAAG,0BAAZ;AAEA,IAAMC,GAAG,GAAG,2BAAZ;AACA,IAAMC,MAAM,GAAG,UAAf;AACA,IAAMC,MAAM,GAAG,IAAIC,oBAAJ,CAAgBH,GAAhB,CAAf;AAEAD,GAAG,CAACK,GAAJ,CAAQC,uBAAWC,IAAX,EAAR,E,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAP,GAAG,CAACQ,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvB,MAAIC,cAAc,GAAGZ,OAAO,CAAC,4BAAD,CAA5B;;AACA,MAAIa,GAAG,GAAG,IAAId,GAAJ,EAAV;AACA,MAAIe,QAAQ,GAAGD,GAAG,CAACE,OAAJ,CAAYH,cAAZ,CAAf;;AACA,MAAI,CAACE,QAAQ,CAACJ,GAAG,CAACM,IAAL,CAAb,EAAyB;AACrB,WAAOC,UAAU,CAACH,QAAD,EAAWH,GAAX,CAAjB;AACH;AAEJ,CARD;;AAUA,IAAIM,UAAU,GAAG,SAAbA,UAAa,CAACH,QAAD,EAAWH,GAAX,EAAmB;AAChC,MAAIO,YAAY,GAAGlB,OAAO,CAAC,oBAAD,CAAP,CAA8BmB,KAAjD;;AAEAC,EAAAA,MAAM,GAAG,EAAT;;AACA,OAAK,IAAIC,CAAT,IAAcP,QAAQ,CAACM,MAAvB,EAA+B;AAC3BE,IAAAA,OAAO,CAACC,GAAR,CAAYT,QAAQ,CAACM,MAAT,CAAgBC,CAAhB,EAAmBG,MAAnB,CAA0BC,eAAtC;AACA,QAAIC,OAAO,GAAGZ,QAAQ,CAACM,MAAT,CAAgBC,CAAhB,EAAmBG,MAAnB,CAA0BC,eAA1B,GAA4CX,QAAQ,CAACM,MAAT,CAAgBC,CAAhB,EAAmBG,MAAnB,CAA0BC,eAAtE,GAAwFX,QAAQ,CAACM,MAAT,CAAgBC,CAAhB,EAAmBM,QAAzH;AACAP,IAAAA,MAAM,CAACQ,IAAP,CAAY;AACRC,MAAAA,IAAI,EAAE,GADE;AAERC,MAAAA,MAAM,EAAE;AAAEJ,QAAAA,OAAO,EAAPA;AAAF,OAFA;AAGRK,MAAAA,KAAK,EAAEjB,QAAQ,CAACM,MAAT,CAAgBC,CAAhB,EAAmBW;AAHlB,KAAZ;AAKH;;AAED,MAAIZ,MAAM,GAAG,IAAIF,YAAJ,CAAiBE,MAAjB,CAAb;AACA,SAAOT,GAAG,CAACsB,MAAJ,CAAW,GAAX,EAAgBzB,IAAhB,CAAqBY,MAArB,CAAP;AACH,CAhBD;;AAkBAnB,GAAG,CAACiC,MAAJ,CAAW,IAAX,EAAiB;AAAA,SAAMZ,OAAO,CAACC,GAAR,CAAY,wBAAZ,CAAN;AAAA,CAAjB",
      "sourceRoot": "/var/www/node/recharge/src",
      "sourcesContent": [
        "import express from \"express\";\nimport { MongoClient } from \"mongodb\";\nimport bodyParser from 'body-parser';\nconst Ajv = require('ajv');\n\n\nconst app = express();\n\nconst url = 'mongodb://localhost:27017';\nconst dbName = 'recharge';\nconst client = new MongoClient(url);\n\napp.use(bodyParser.json());\n\n// app.get(\"/\", async (req, res) => {\n//     try {\n//         const client = await MongoClient.connect(url);\n//         const db = client.db(dbName);\n//         let insert = await db.collection(\"users\").insertOne({\n//             \"name\": \"Zohurul Islam\",\n//             username: \"mail@zohurul.com\",\n//             \"password\": \"123456\"\n//         })\n//         let hash = bcrypt.hashSync('myPassword', 10);\n//         client.close();\n//     } catch (error) {\n//         res.status(500).json({ message: 'Error connecting to db', error });\n//     }\n// });\napp.get(\"/\", (req, res) => {\n    let userJsonSchema = require('../schema/user-insert.json');\n    let ajv = new Ajv();\n    let validate = ajv.compile(userJsonSchema);\n    if (!validate(req.body)) {\n        return throwError(validate, res);\n    }\n    \n});\n\nlet throwError = (validate, res) => {\n    let JSONAPIError = require('jsonapi-serializer').Error;\n\n    errors = [];\n    for (let i in validate.errors) {\n        console.log(validate.errors[i].params.missingProperty);\n        let pointer = validate.errors[i].params.missingProperty ? validate.errors[i].params.missingProperty : validate.errors[i].dataPath;\n        errors.push({\n            code: 400,\n            source: { pointer },\n            title: validate.errors[i].message,\n        })\n    }\n\n    let errors = new JSONAPIError(errors);\n    return res.status(400).json(errors);\n}\n\napp.listen(8000, () => console.log('Listening on port 8000'));"
      ]
    },
    "sourceType": "script",
    "mtime": 1572176057938
  }
}